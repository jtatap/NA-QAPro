!function($){var logger=IC_Common.getLogger("Authenticate");$.widget("AgentConsole.authenticate",{options:{sfSessionId:"",username:"",isAutoLogin:!1,sfNamespace:"",resourceBase:"",sfMode:"",sfUserId:"",redirectUrl:""},callCenterSettings:"",passwordChanged:!1,defaultPassword:"********",password:"",queryParams:IC_Common.parseQueryString(window.location.search),evolveLoginPageUrl:"",_create:function(){var that=this;this.loginPanel=$('<div class="agentLogin"/>').appendTo(this.element),this.evolveLoginFrame=$('<iframe id="evolveLoginFrame" frameborder="0" style="position:absolute"></iframe>').appendTo(this.element),this.evolveLoginFrame.hide(),$('<div class="logo-section"><div class="nice-ic-logo"/></div>').appendTo(this.loginPanel),this.loginFormPanel=$('<div class="loginFormPanel"/>').appendTo(this.loginPanel),this.ssoErrorPanel=$('<div class="ssoErrorPanel"/>').appendTo(this.loginPanel),this.ssoErrorPanel.hide(),this.downloadLogPanel=$('<div class="downloadLogPanel"/>').appendTo(this.loginPanel),this.lnkDownloadLog=$("<a>"+IC_Localization.downloadLog+"</a>").appendTo(this.downloadLogPanel),this.lnkDownloadLog.on("click",$.proxy(this.onDownloadLog,this)),this.loadingSpinner=$('<div class="loadingSpinner"><div class="progressDiv progress-bounce-middle"></div></div>').appendTo(this.element),$('<div class="login-form-header">'+IC_Localization.signIn+"</div>").appendTo(this.loginFormPanel),this.loginForm=$('<div class="loginForm"/>').appendTo(this.loginFormPanel),this.namePanel=$('<div class="namePanel"/>').appendTo(this.loginForm),this.nameTxt=$('<input class="login-form-input top-space" type="text" id="agentNameId" value = "'+this.options.username+'" placeholder="'+IC_Localization.email+'"/>').appendTo(this.namePanel),IC_Validation.isNullOrEmpty(this.options.username)&&(this.defaultPassword=""),this.pwdPanel=$('<div class="namePanel pwdPanel"/>').appendTo(this.loginForm),this.pwdTxt=$('<input class="login-form-input" type="password" id = "agentPwdId" value = "'+this.defaultPassword+'" placeholder="'+IC_Localization.password+'"/>').appendTo(this.pwdPanel),this.pwdTxt.on("click",function(){that.passwordChanged=!0,that.pwdTxt.val("")}),this.pwdTxt.on("focus",function(){that.passwordChanged=!0,that.pwdTxt.val("")}),this.showPwdIcon=$('<div class="showPwdIcon"/>').appendTo(this.pwdPanel),this.showPwdIcon.on("click",function(){"password"===that.pwdTxt.attr("type")?(that.pwdTxt.attr("type","text"),that.showPwdIcon.addClass("passwdShown")):(that.pwdTxt.attr("type","password"),that.showPwdIcon.removeClass("passwdShown"))}),this.autoLoginCheckPanel=$('<div class="namePanel btnPanel"/>').appendTo(this.loginForm),this.autoLoginCheck=$('<label class="checkbox-container">'+IC_Localization.enableAutoLogin+'<input type="checkbox" id="autoLoginChkBox" name="autoLoginChkBox"/><span id="checkmark" class="checkmark"></span></label>').appendTo(this.autoLoginCheckPanel),$('input[name="autoLoginChkBox"]').attr("checked",this.options.isAutoLogin),this.errorPanel=$('<div class="errorPanel"/>').appendTo(this.loginForm),this.btnPanel=$('<div class="namePanel btnPanel"/>').appendTo(this.loginForm),this.btnLogin=$('<input class="login-form-input" type="button" id ="loginBtnId" value= "'+IC_Localization.signIn+'"/>').appendTo(this.btnPanel),this.btnLogin.on("click",$.proxy(this.onAgentLogin,this)),this.btnLogin.on("mousedown",function(){that.btnPanel.addClass("btn-clicked")}),this.footerPanel=$('<div id="copyRight-contactUs"></div>').appendTo(this.loginPanel),this.footerLogo=$('<div id="footer-logo"/>').appendTo(this.footerPanel),this.copyRightMsg=$('<div id="copyRightMsg"/>').appendTo(this.footerPanel),$("<div>"+IC_Localization.copyRightInfo1+"</div>").appendTo(this.copyRightMsg),$("<div>"+IC_Localization.copyRightInfo2+"</div>").appendTo(this.copyRightMsg),$("<div>"+IC_Localization.copyRightInfo3+"</div>").appendTo(this.copyRightMsg),this.namePanel.css("display","block"),this.pwdPanel.css("display","block"),this.btnPanel.css("display","block"),this.loginPanel.hide()},_init:function(){logger.setLevel(log4javascript.getLevelByName("ALL"));AgentConsoleSalesforce.init({resourceBase:this.options.resourceBase,namespace:this.options.sfNamespace}),IC_Validation.isNotNullOrEmpty(sforce)&&IC_Validation.isNotNullOrEmpty(sforce.connection)&&(sforce.connection.sessionId=this.options.sfSessionId),AuthenticationDataStore.getCallCenterSettings(this.options.sfSessionId,$.proxy(this.onCallCenterSettingsCallback,this))},refreshAccessToken:function(){AuthenticationDataStore.getAccessTokenByRefreshToken($.proxy(this.onRefreshAccessTokenSuccess,this),$.proxy(this.onRefreshAccessTokenFailure,this))},onRefreshAccessTokenSuccess:function(){logger.debug("onRefreshAccessTokenSuccess - Redirecting to page"),this.redirectToOriginPage()},onRefreshAccessTokenFailure:function(){logger.debug("onRefreshAccessTokenFailure");if(AuthenticationDataStore.isSSO())window.addEventListener("message",$.proxy(this.onMessageFromAuthCallbackPage,this),!1),logger.debug("Authentication mode - OpenID Connect"),this.loginPanel.hide(),AuthenticationDataStore.getCustomDomainAuthInfo($.proxy(this.onCustomDomainAuthInfoSuccess,this),$.proxy(this.onCustomDomainAuthInfoFailure,this));else if(AuthenticationDataStore.isEvolve())window.addEventListener("message",$.proxy(this.onMessageFromAuthCallbackPage,this),!1),this.evolveLoginPageUrl=AuthenticationDataStore.getEvolveLoginPageUrl(this.options.redirectUrl),this.loginPanel.hide(),this.redirectToAuthLoginPage(this.evolveLoginPageUrl),$("body").css("min-height","auto");else{this.loadingSpinner.hide(),this.loginPanel.showfn();var disableAutoLogin=!1,disableAutoLoginParam=IC_Common.getParameterByName(window.location.search,"disableAutoLogin");IC_Validation.isNotNullOrEmpty(disableAutoLoginParam)&&(disableAutoLogin=IC_Common.toBoolean(disableAutoLoginParam)),this.options.isAutoLogin&&IC_Validation.isNotNullOrEmpty(this.options.username)&&!0!==disableAutoLogin&&this.onAgentLogin()}},onMessageFromAuthCallbackPage:function(event){var eventData=event.data;0===this.options.redirectUrl.indexOf(event.origin)&&"authcode"==eventData.messageType&&(logger.debug("onMessageFromAuthCallbackPage >> eventData : "+JSON.stringify(eventData)),AuthenticationDataStore.isSSO()?this.onSSOLoginPageRedirect(eventData.message):AuthenticationDataStore.isEvolve()&&this.onEvolveLoginPageRedirect(eventData.message))},onCustomDomainAuthInfoSuccess:function(customDomainAuthInfo){if(IC_Validation.isNullOrEmpty(customDomainAuthInfo)||IC_Validation.isNullOrEmpty(customDomainAuthInfo.openIdAuthorize)){logger.error("OpenID Connect auth info or authorization endpoint is empty for custom domain");return this.evolveLoginFrame.hide(),this.loadingSpinner.hide(),this.loginFormPanel.hide(),this.loginPanel.showfn(),void this.showErrorMessage(this.ssoErrorPanel,{ShowError:!0,msg:"openIDConnectConfigurationNotValidated"})}logger.debug("Redirect/Callback URI for SSO - "+this.options.redirectUrl);var ssoLoginPageUrl=AuthenticationDataStore.getSSOLoginPageUrl(customDomainAuthInfo,this.options.redirectUrl);IC_Validation.isNotNullOrEmpty(ssoLoginPageUrl)&&(logger.debug("Redirecting to openid provider login page - "+ssoLoginPageUrl),this.redirectToAuthLoginPage(ssoLoginPageUrl))},onCustomDomainAuthInfoFailure:function(status,statusText,response){logger.error("Custom domain auth information retrieval failed- status :"+status+", statusText: "+statusText+", response : "+JSON.stringify(response)),this.evolveLoginFrame.hide(),this.loadingSpinner.hide(),this.loginFormPanel.hide(),this.loginPanel.showfn(),this.showSSOLoginError()},onEvolveLoginPageRedirect:function(queryStringParam){this.loadingSpinner.hide();var authCode=IC_Common.parseQueryString(queryStringParam).authCode;IC_Validation.isNotNullOrEmpty(authCode)&&(logger.debug("onEvolveLoginPageRedirect - CXone authCode received "),localStorage.authCode=authCode,AuthenticationDataStore.cx1Authenticate(this.options.sfUserId,localStorage.authCode,$.proxy(this.onEvolveAuthenticationSuccess,this),$.proxy(this.onEvolveAuthenticationFailure,this)))},onSSOLoginPageRedirect:function(queryStringParam){try{this.loadingSpinner.hide();this.evolveLoginFrame.get(0);var authCode=IC_Common.getParameterByName(queryStringParam,"code"),state=IC_Common.getParameterByName(queryStringParam,"state"),error=IC_Common.getParameterByName(queryStringParam,"error"),errorDescription=IC_Common.getParameterByName(queryStringParam,"error_description");if(!1===AuthenticationDataStore.validateCallbackRequest(state))return void logger.error("onSSOLoginPageRedirect - callback request is not valid. State parameter mismatched");if(IC_Validation.isNotNullOrEmpty(error)||IC_Validation.isNotNullOrEmpty(errorDescription)){logger.error("onSSOLoginPageRedirect - Error information error: "+error+" error_description:"+errorDescription),this.evolveLoginFrame.hide(),this.loginFormPanel.hide(),this.loginPanel.showfn();IC_Validation.isNotNullOrEmpty(errorDescription);return void this.showSSOLoginError()}if(IC_Validation.isNotNullOrEmpty(authCode)){logger.debug("onSSOLoginPageRedirect - authCode received from openidProvider "+authCode),localStorage.authCode=authCode;var customDomainAuthInfo=AuthenticationDataStore.customDomainAuthInfo;AuthenticationDataStore.getAccessToken(customDomainAuthInfo.icAuthorizationUrl,authCode,AuthenticationDataStore.idpType,customDomainAuthInfo.bus_no,this.options.redirectUrl,$.proxy(this.onSSOAuthenticationSuccess,this),$.proxy(this.onSSOAuthenticationFailure,this))}}catch(error){logger.fatal("onSSOLoginPageRedirect<<exception : ",error)}},onSSOAuthenticationSuccess:function(result){logger.debug("onSSOAuthenticationSuccess"),AuthenticationDataStore.updateNewAccessToken(result),this.redirectToOriginPage()},onSSOAuthenticationFailure:function(statusCode,statusText,response){if(logger.error("onSSOAuthenticationFailure - statusCode:"+statusCode+" statusText:"+statusText+" response : "+response),this.evolveLoginFrame.hide(),this.loadingSpinner.hide(),this.loginFormPanel.hide(),this.loginPanel.showfn(),IC_Validation.isNotNullOrEmpty(statusText)&&-1!=statusText.toLowerCase().indexOf("unauthorized endpoint")){var error={ShowError:!0,msg:statusText};this.showErrorMessage(this.ssoErrorPanel,error)}else this.showSSOLoginError()},onCallCenterSettingsCallback:function(){this.callCenterSettings=AuthenticationDataStore.callCenterSettings,this.refreshAccessToken()},onEvolveAuthenticationSuccess:function(){this.redirectToOriginPage()},onEvolveAuthenticationFailure:function(){AuthenticationDataStore.cx1Logout($.proxy(this.redirectToAuthLoginPage,this,this.evolveLoginPageUrl))},onAuthenticationSuccess:function(result){logger.debug("onAuthenticationSuccess - Redirecting to page"),AuthenticationDataStore.updateNewAccessToken(result),this.redirectToOriginPage()},onAuthenticationFailure:function(statusCode,statusText,statusResponse){logger.debug("onAuthenticationFailure - statusCode :"+statusCode+", statusText :"+statusText);var error=this.getErrorObjectInfo(statusCode,statusText,statusResponse,!1);this.showErrorMessage(this.errorPanel,error)},authenticate:function(){AuthenticationDataStore.getAccessToken(this.callCenterSettings.icAuthorizationUrl,"",null,null,null,$.proxy(this.onAuthenticationSuccess,this),$.proxy(this.onAuthenticationFailure,this))},disableBtnPanel:function(){this.btnLogin.attr("disabled",!0),this.btnPanel.addClass("btn-disabled")},enableBtnPanel:function(){this.btnLogin.attr("disabled",!1),this.btnPanel.removeClass("btn-disabled")},onAgentLogin:function(){this.btnPanel.removeClass("btn-clicked"),this.disableBtnPanel(),this.errorPanel.hide();var errorStr="",isAutoLogin=$('input[name="autoLoginChkBox"]').is(":checked");if(IC_Validation.isNullOrEmpty(this.nameTxt.val())?errorStr=IC_Localization.usernameRequired:IC_Validation.isValidEmail(this.nameTxt.val())||(errorStr=IC_Localization.usernameIsNotValid),IC_Validation.isNullOrEmpty(this.pwdTxt.val())?errorStr=this.addErrorMsg(errorStr,IC_Localization.passwordRequired):this.overridePassword(),IC_Validation.isNotNullOrEmpty(errorStr))return this.errorPanel.html(IC_Localization.error+": "+errorStr),this.errorPanel.showfn(),void this.enableBtnPanel();this.nameTxt.val()!==this.options.username||IC_Validation.isNotNullOrEmpty(this.password)||this.options.isAutoLogin!==isAutoLogin?this.upsertUserCredentials(this.nameTxt.val(),this.password,isAutoLogin,$.proxy(this.onUpsertUserCredentialsCallback,this)):this.authenticate()},onUpsertUserCredentialsCallback:function(isError,errorMsg){isError?logger.error("Error in updating incontact credentials"+errorMsg):(logger.debug("incontact credentials updated successfully"),this.authenticate())},upsertUserCredentials:function(username,password,isAutoLogin,callback){AuthenticationDataStore.upsertUserCredentials(username,password,isAutoLogin,callback)},overridePassword:function(){!0===this.passwordChanged?(this.password=this.pwdTxt.val(),this.passwordChanged=!1):this.password=""},addErrorMsg:function(errorMsg,msg){return IC_Validation.isNotNullOrEmpty(errorMsg)?errorMsg+="<br/>"+msg:errorMsg=msg,errorMsg},getErrorObjectInfo:function(statusCode,statusText,statusResponse){var message;if(IC_Validation.isNotNullOrEmpty(statusText)){var statusInfo=0===statusCode?statusText:statusCode+" ("+statusText+")";message=IC_Localization.loginFailedError+" "+statusInfo}else message=IC_Localization.loginFailedErrorAttempt;return{ShowError:!0,msg:message,response:IC_Validation.isNotNullOrEmpty(statusResponse)?IC_Common.parseJSON(statusResponse):null}},showErrorMessage:function(errorPanelElement,error){IC_Validation.isValidObject(error)&&error.ShowError&&(IC_Validation.isNotNullOrEmpty(error.response)&&IC_Validation.isNotNullOrEmpty(error.response.error_description)?errorPanelElement.html(IC_Common.getLocalizedErrorMsg(error.response.error_description)):errorPanelElement.html(IC_Common.getLocalizedErrorMsg(error.msg)),errorPanelElement.showfn(),this.enableBtnPanel())},redirectToOriginPage:function(){var redirectUrl=IC_Common.getParameterByName(window.location.search,"redirectURL");logger.debug("Redirecting to page -"+redirectUrl),window.location.href=redirectUrl},redirectToAuthLoginPage:function(loginPageUrl){this.evolveLoginFrame.attr("src",loginPageUrl),this.evolveLoginFrame.showfn()},onDownloadLog:function(){AuthenticationDataStore.downloadLog()},showSSOLoginError:function(){this.showErrorMessage(this.ssoErrorPanel,{ShowError:!0,msg:"ssologinfailed"})}})}(jQuery);