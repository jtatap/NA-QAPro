!function($){var logger=IC_Common.getLogger("WebRTC");webRTC={audioCode:null,agentLegCall:null,isAudiocodeServerLoggedIn:!1,agentSettings:{},agentLegId:"",connectionInProgress:!1,resourceBase:"",lgState:"",statusMessages:{ac_connected:"connected",ac_disconnected:"disconnected",ac_loginfailed:"login failed",ac_login:"login",ac_logout:"logout",ac_outgoingCallProgress:"outgoingCallProgress",ac_callTerminated:"callTerminated",ac_callConfirmed:"callConfirmed",ac_callShowStreams:"callShowStreams",ac_incomingCall:"incomingCall",ac_callHoldStateChanged:"callHoldStateChanged",custom_initializingAudioCode:"initializingAudioCode",custom_connectingAgentLeg:"connectingAgentLeg",validation_speakerMicMissing:"speakerMicMissing",validation_mediaDeviceAccessDenied:"mediaDeviceAccessDenied"},WebRTCStatusChangedEvent:"agentConsole_WebRTCStatusChangedEvent",startSession:function(){$(window).on("beforeunload",$.proxy(this.onBeforeUnload,this)),$(document).on(AgentConsoleDataStore.AgentInfoEvent,$.proxy(this.onAgentInfoUpdate,this)),$(document).on(AgentConsoleDataStore.ContactEvent,$.proxy(this.onContactUpdate,this))},stopSession:function(){$(window).off("beforeunload",$.proxy(this.onBeforeUnload,this)),$(document).off(AgentConsoleDataStore.AgentInfoEvent,$.proxy(this.onAgentInfoUpdate,this)),$(document).off(AgentConsoleDataStore.ContactEvent,$.proxy(this.onContactUpdate,this)),this.logoutAudioCodeServer()},onAgentInfoUpdate:function(){var agentInfo=AgentConsoleDataStore.agentInfo;if(IC_Validation.isNotNull(agentInfo)&&IC_Validation.isNotNull(agentInfo.id)){if(this.isAudiocodeServerLoggedIn||this.connectAudioCodeServer(),this.lgState===agentInfo.lgState)return;this.lgState=agentInfo.lgState;var showAcceptReject=!1;switch(agentInfo.lgState){case"Dialing":(showAcceptReject=this.needToShowAgentLegAcceptReject())||this.connectAgentLeg(agentInfo.lgId);break;case"Active":this.connectAgentLeg(agentInfo.lgId);break;default:this.disconnectAgentLeg()}AgentConsoleDataStore.fireAgentLegAcceptRejectActions(showAcceptReject?"show":"hide")}},onContactUpdate:function(){AgentConsoleDataStore.browserTabIndex==AgentConsoleDataStore.defaultContactInitTabIndex&&(AgentConsoleDataStore.getContacts(function(contact){return contact.inbound&&"Incoming"==contact.status&&("CallContactEvent"===contact.contactType||"Consult"===contact.type||"VoiceMailContactEvent"==contact.contactType)}).length>0?this.playAudioNotification():this.stopAudioNotification())},stopAudioNotification:function(){IC_Validation.isNotNullOrEmpty(this.audio)&&(this.audio.pause(),this.audio.currentTime=0)},playAudioNotification:function(){try{var that=this;if(IC_Validation.isNullOrEmpty(this.audio)){var audio=new Audio(this.resourceBase+"/audio/notify.mp3");audio.onloadedmetadata=function(){that.audio=audio,audio.loop=!0,audio.play()}}else IC_Validation.isNotNullOrEmpty(this.audio)&&(0==this.audio.ended&&(this.audio.currentTime=0),this.audio.play())}catch(ex){logger.error("Audio Error",ex.message)}},onBeforeUnload:function(){if(logger.debug("onBeforeUnload>> "),this.storeAgentLegCallData(),this.storeConnectedACServer(),this.isBrowserConfirmPromptRequired())return this.showBrowserConfirmationPrompt();logger.debug("onBeforeUnload<< ")},isBrowserConfirmPromptRequired:function(){var voiceContacts=AgentConsoleDataStore.getContacts(function(contact){return"CallContactEvent"===contact.contactType&&"Disconnected"!==contact.status||"VoiceMailContactEvent"==contact.contactType&&"Discarded"!=contact.status});return null!=this.agentLegCall&&voiceContacts.length>0},showBrowserConfirmationPrompt:function(){return AgentConsoleDataStore.removeContactInitiationTab(),!0},setServerPriority:function(webRTCWSSUrls,restoreServerUrl){logger.debug("setServerPriority>> webRTCWSSUrls: "+JSON.stringify(webRTCWSSUrls)+" , restoreServerUrl: "+restoreServerUrl);var searchAddress=restoreServerUrl.toLowerCase();for(let i=0,length=webRTCWSSUrls.length;i<length;i++){let data=webRTCWSSUrls[i];if((data instanceof Array?data[0]:data).toLowerCase()===searchAddress){webRTCWSSUrls[i]=[restoreServerUrl,1e3];break}}return logger.debug("setServerPriority<< webRTCWSSUrls: "+JSON.stringify(webRTCWSSUrls)),webRTCWSSUrls},storeConnectedACServer:function(){if(null!=this.audioCode){var connectedServer=this.audioCode.getServerAddress();null!=connectedServer&&(logger.debug("storeConnectedACServer>> connectedAudioCodeServer :"+connectedServer),localStorage.setItem("connectedAudioCodeServer",connectedServer))}},storeAgentLegCallData:function(){logger.debug("storeAgentLegCallData>> ");var agentLegCall=this.agentLegCall;if(null!==agentLegCall&&agentLegCall.isEstablished()){let activeCall={callTo:agentLegCall.data._user,video:agentLegCall.data._video,replaces:agentLegCall.getReplacesHeader(),time:(new Date).getTime(),agentLegId:this.agentLegId};var agentCallData=JSON.stringify(activeCall);localStorage.setItem("agentLegCall",agentCallData),this.setCallEstablishedTab(),logger.debug("storeAgentLegCallData>> agentLegCall: "+agentCallData)}logger.debug("storeAgentLegCallData<< ")},restoreCall:function(){logger.debug("restoreCall>> ");let restoreData=localStorage.getItem("agentLegCall");try{if(null!==restoreData){let callData=IC_Common.parseJSON(restoreData);logger.debug("restoreCall>> "+restoreData);var params=["X-InContact-AgentLegId: "+callData.agentLegId,"Replaces: "+callData.replaces];return this.agentLegCall=this.audioCode.call(callData.video,callData.callTo,params),logger.debug("restoreCall<< Success"),!0}}catch(exe){return logger.error("restoreCall<< Failed : ",exe),!1}},isWebRTCSupportedBrowser:function(){var isWebRTCEnabled=void 0!=navigator.mediaDevices&&void 0!=navigator.mediaDevices.getUserMedia;return logger.debug("isWebRTCSupportedBrowser << ",isWebRTCEnabled),isWebRTCEnabled},isSpeakerandMicAvailable:function(){logger.debug("isSpeakerandMicAvailable>> ");var isSpeakerAvailable=!1,isMicAvailable=!1;return navigator.mediaDevices.enumerateDevices().then(function(devices){if(devices.forEach(function(device){switch(device.kind){case"audioinput":isMicAvailable=!0;break;case"audiooutput":isSpeakerAvailable=!0}}),logger.debug("isSpeakerandMicAvailable<< Is Speaker Available : "+isSpeakerAvailable),logger.debug("isSpeakerandMicAvailable<< Is Mic Available : "+isMicAvailable),isSpeakerAvailable&&isMicAvailable)return!0;logger.error("isSpeakerandMicAvailable<< Both Speaker and Mic are Required")}).catch(function(err){return logger.error("isSpeakerandMicAvailable<< Error Details: ",err.message),!1})},requestMediaAccess:function(){logger.debug("requestMediaAccess>>");var that=this;return navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then(function(){return logger.debug("requestMediaAccess>> Access granted to Audio device"),!0}).catch(function(err){return"NotFoundError"==err.name?(that.fireEvent(that.statusMessages.validation_speakerMicMissing),logger.error("requestMediaAccess>> Audio device Not Found : "+err.message)):(that.fireEvent(that.statusMessages.validation_mediaDeviceAccessDenied),logger.error("requestMediaAccess>> Access Denied to Audio device : ",err.message)),!1})},loginAudioCodeServer:function(){logger.debug("loginAudioCodeServer>>");try{if(this.connectionInProgress)return void logger.debug("Avoiding uncessary connection to AudioCodes Server as the already initiated connection is in Progress");this.fireEvent(this.statusMessages.custom_initializingAudioCode),this.connectionInProgress=!0;var agentId=AgentConsoleDataStore.agentInfo.id,phoneConfig={reconnectIntervalMin:2,reconnectIntervalMax:30,registerExpires:600,useSessionTimer:!1,keepAlivePing:10,keepAlivePong:10,keepAliveStats:60,chromeAudioConstraints:"echoCancellation,googEchoCancellation,googEchoCancellation2,googDAEchoCancellation,googAutoGainControl,googNoiseSuppression,googNoiseSuppression,googHighpassFilter,googTypingNoiseDetection,googAudioMirroring"},acServers=this.agentSettings.webRTCWSSUrls,lastConnectedACServer=localStorage.getItem("connectedAudioCodeServer");IC_Validation.isNotNullOrUndefinedString(lastConnectedACServer)&&this.setServerPriority(acServers,lastConnectedACServer),this.audioCode=new AudioCodesUA,this.audioCode.setServerConfig(acServers,this.agentSettings.webRTCServerDomain,this.agentSettings.webRTCICEUrls),this.audioCode.setAccount(agentId,agentId,"",""),this.audioCode.setReconnectIntervals(phoneConfig.reconnectIntervalMin,phoneConfig.reconnectIntervalMax),this.audioCode.setRegisterExpires(phoneConfig.registerExpires),this.audioCode.setUseSessionTimer(phoneConfig.useSessionTimer),this.audioCode.setChromeAudioConstraints(phoneConfig.chromeAudioConstraints),this.audioCode.setWebSocketKeepAlive(phoneConfig.keepAlivePing,phoneConfig.keepAlivePong,phoneConfig.keepAliveStats),this.audioCode.setRegisterExtraHeaders(["X-SBC: AudioCodes Mediant"]),this.audioCode.setAcLogger(this.ac_log),this.audioCode.setJsSipLogger(this.jssip_log),this.audioCode.setListeners(this.audiocodeListeners()),this.audioCode.init(!0)}catch(exe){logger.error("loginAudioCodeServer<< Failed : ",exe)}logger.debug("loginAudioCodeServer<<")},ac_log:function(){let args=[].slice.call(arguments);logger.debug("[AC] "+args)},jssip_log:function(){let args=[].slice.call(arguments);logger.debug("[JSSIP] "+args)},audiocodeListeners:function(){var that=this;return{loginStateChanged:function(isLogin,cause){switch(that.connectionInProgress=!1,that.isAudiocodeServerLoggedIn=isLogin,logger.debug("audiocode>>> loginStateChanged: isLogin= "+isLogin+", cause = "+cause),that.fireEvent(cause),cause){case that.statusMessages.ac_login:IC_Validation.isNotNullOrUndefinedString(that.agentLegId)&&that.makeAgentLegCall();break;case that.statusMessages.ac_connected:that.storeConnectedACServer();break;case that.statusMessages.ac_disconnected:case that.statusMessages.ac_logout:localStorage.removeItem("connectedAudioCodeServer"),logger.debug("audiocode>>> loginStateChanged: Removed connectedAudioCodeServer value from localstorage")}},outgoingCallProgress:function(call,response){that.fireEvent(that.statusMessages.ac_outgoingCallProgress),logger.debug("audiocode>>> outgoing call progress: call="+JSON.stringify(call.data))},callTerminated:function(call,message,cause,redirectTo){that.fireEvent(that.statusMessages.ac_callTerminated),logger.debug("audiocode>>> call terminated: call="+JSON.stringify(call.data)+",message="+message+",cause="+cause+",redirectTo="+redirectTo),that.removeCallEstablishedTab(),AgentConsoleDataStore.removeContactInitiationTab(),that.agentLegCall=null},callConfirmed:function(call,message,cause){that.fireEvent(that.statusMessages.ac_callConfirmed),that.storeAgentLegCallData(),logger.debug("audiocode>>> callConfirmed: call="+JSON.stringify(call.data)+",cause="+cause)},callShowStreams:function(call,localStream,remoteStream){that.fireEvent(that.statusMessages.ac_callShowStreams),logger.debug("audiocode>>> callShowStreams: call="+JSON.stringify(call.data)),document.getElementById("audio").srcObject=remoteStream},incomingCall:function(call,invite){that.fireEvent(that.statusMessages.ac_incomingCall),logger.debug("audiocode>>> incomingCall: call="+JSON.stringify(call.data))},callHoldStateChanged:function(call,isHold,isRemote){that.fireEvent(that.statusMessages.ac_callHoldStateChanged),logger.debug("audiocode>>> callHoldStateChanged: call="+JSON.stringify(call.data)+", isHold="+isHold+",isRemote="+isRemote)}}},connectAgentLeg:function(agentLegId){(this.isCallEstablishedTab()||AgentConsoleDataStore.isContactInitiationTab())&&(logger.debug("connectAgentLeg>> agentLegId: "+agentLegId,NaN+this.connectionInProgress),this.agentLegId=agentLegId,AgentConsoleDataStore.getAgentSettings($.proxy(this.ongetAgentSettingsCompleted,this)))},isCallEstablishedTab:function(){return"true"===sessionStorage.getItem("isCallEstablishedTab")},setCallEstablishedTab:function(){sessionStorage.setItem("isCallEstablishedTab",!0),localStorage.setItem("isCallEstablishedTab",!0)},removeCallEstablishedTab:function(){sessionStorage.removeItem("isCallEstablishedTab")},connectAudioCodeServer:function(){logger.debug("connectAudioCodeServer>> isAudiocodeServerLoggedIn: "+this.isAudiocodeServerLoggedIn),AgentConsoleDataStore.getAgentSettings($.proxy(this.ongetAgentSettingsCompleted,this))},ongetAgentSettingsCompleted:function(agentSettings){this.agentSettings=agentSettings;var that=this;logger.debug("ongetAgentSettingsCompleted>> isAudiocodeServerLoggedIn : "+this.isAudiocodeServerLoggedIn),this.isSpeakerandMicAvailable().then(function(isSpeakerandMicAvailable){isSpeakerandMicAvailable?that.isAudiocodeServerLoggedIn?(null==that.agentLegCall||null!=that.agentLegCall&&!that.agentLegCall.isEstablished())&&that.makeAgentLegCall():that.loginAudioCodeServer():that.fireEvent(that.statusMessages.validation_speakerMicMissing)})},makeAgentLegCall:function(){var that=this;this.requestMediaAccess().then(function(isMediaAccessProvided){if(isMediaAccessProvided){logger.debug("makeAgentLegCall>>");try{if(that.fireEvent(that.statusMessages.custom_connectingAgentLeg),!that.restoreCall()){var params=["X-InContact-AgentLegId: "+that.agentLegId];that.agentLegCall=that.audioCode.call(!1,that.agentSettings.webRTCDNIS,params)}}catch(err){return logger.error("makeAgentLegCall>> Error Details: ",err.message),!1}logger.debug("makeAgentLegCall<<")}})},logoutAudioCodeServer:function(){logger.debug("logoutAudioCodeServer>>");try{this.isAudiocodeServerLoggedIn=!1,this.agentLegId="",this.disconnectAgentLeg(),null!=this.audioCode&&this.audioCode.logout()}catch(exe){logger.error("logoutAudioCodeServer<< Failed : ",exe)}logger.debug("logoutAudioCodeServer<<")},disconnectAgentLeg:function(){logger.debug("disconnectAgentLeg>>"),this.removeCallEstablishedTab(),null!=this.agentLegCall&&(this.agentLegCall.terminate(),AgentConsoleDataStore.removeContactInitiationTab()),this.agentLegCall=null,localStorage.removeItem("agentLegCall"),logger.debug("disconnectAgentLeg<<")},fireEvent:function(status){$(document).trigger(this.WebRTCStatusChangedEvent,{status:status})},needToShowAgentLegAcceptReject:function(){return AgentConsoleDataStore.getContacts(function(contact){return contact.inbound&&("CallContactEvent"===contact.contactType&&"Consult"!==contact.type||"VoiceMailContactEvent"==contact.contactType)}).length>0}}}(jQuery);