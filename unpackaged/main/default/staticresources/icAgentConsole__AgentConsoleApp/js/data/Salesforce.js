!function($){var logger=IC_Common.getLogger("SFClassic");AgentConsoleSalesforce={isConsole:!1,isLightning:!1,icCustomSearchApex:"inContactControlledSearch",onClickToDial:!1,softPhoneLayoutSettings:null,pageInfo:null,sfRunApexError:"Your session is invalid or an error occurred. Refresh the page and try again, or ask your Salesforce admin for help.",staticResource:null,cx1Window:null,queryParams:IC_Common.parseQueryString(window.location.search),isOpenCti:!0,init:function(args){this.staticResource=args.resourceBase,IC_Validation.isNotNull(args.namespace)&&(this.icCustomSearchApex=args.namespace+".inContactControlledSearch"),this.isOpenCti=IC_Validation.isNotNullOrEmpty(this.queryParams.sfdcIFrameOrigin)&&IC_Validation.isNotNullOrEmpty(this.queryParams.nonce)&&IC_Validation.isNullOrEmpty(this.queryParams.sfdcIFrameHost)},setSoftphonePanelLayout:function(height,width){},getCallCenterSettings:function(callback){var that=this;if(!0===this.isOpenCti)sforce.interaction.cti.getCallCenterSettings(function(response){var settings={};try{IC_Validation.isNotNullOrEmpty(response.result)?settings=that.formCallCenterSettingsInfo(response.result):(settings.error=response.error,logger.error("getCallCenterSettings - "+response.error)),callback(settings)}catch(e){callback({error:"Error processing getCallCenterSettings"}),logger.fatal("getCallCenterSettings - ",e)}});else{var settings={},url=window.location.protocol+"//"+window.location.host+"/_ui/cti/callcenter/CallCenterSettingsServlet";logger.debug("getCallCenterSettings url -"+url),IC_Ajax.xmlHttpRequest("get",url,null,null,function(response){var data=response.substr(10);settings=eval("("+data+")"),settings=that.formCallCenterSettingsInfo(settings.getCallCenterSettings),callback(settings)},function(status,statusText,responseText){logger.error("getCallCenterSettings - status: "+status+"statusText :  "+statusText+" responseText : "+responseText),callback({error:"Error processing getCallCenterSettings"})},!0,null,null,"text")}},formCallCenterSettingsInfo:function(result){var responseObj=IC_Common.parseJSON(result),icAuthorizationUrl=IC_Validation.isNotNullOrEmpty(responseObj["/inContactSettings/icAuthorizationUrl"])?responseObj["/inContactSettings/icAuthorizationUrl"]:responseObj["/inContactSettings/inContactTokenServiceUri"],authMode=responseObj["/inContactSettings/authMode"],evolveAuthUrl=responseObj["/inContactSettings/evolveAuthUrl"],evolveNotificationUrl=responseObj["/inContactSettings/evolveNotificationUrl"],evolveWebServerUrl=responseObj["/inContactSettings/evolveWebServerUrl"],lightningHeight=responseObj["/reqGeneralInfo/reqSoftphoneLightningHeight"],lightningWidth=responseObj["/reqGeneralInfo/reqSoftphoneLightningWidth"],icCustomDomain=responseObj["/inContactSettings/icCustomDomain"],settings={result:{}};return IC_Validation.isNotNullOrEmpty(icAuthorizationUrl)&&(settings.result.icAuthorizationUrl=icAuthorizationUrl),IC_Validation.isNotNullOrEmpty(authMode)&&(settings.result.authMode=authMode),IC_Validation.isNotNullOrEmpty(evolveAuthUrl)&&(settings.result.evolveAuthUrl=evolveAuthUrl),IC_Validation.isNotNullOrEmpty(evolveNotificationUrl)&&(settings.result.evolveNotificationUrl=evolveNotificationUrl),IC_Validation.isNotNullOrEmpty(evolveWebServerUrl)&&(settings.result.evolveWebServerUrl=evolveWebServerUrl),IC_Validation.isNotNullOrEmpty(lightningHeight)&&(settings.result.lightningHeight=lightningHeight),IC_Validation.isNotNullOrEmpty(lightningWidth)&&(settings.result.lightningWidth=lightningWidth),IC_Validation.isNotNullOrEmpty(icCustomDomain)&&(settings.result.icCustomDomain=icCustomDomain),logger.debug("getCallCenterSettings - icAuthorizationUrl: "+settings.result.icAuthorizationUrl),settings},authenticate:function(authUrl,authMode,authCode,idpType,busNo,redirectUri,callback){logger.trace("authenticate >>> url:"+authUrl+" authMode:"+authMode+" authCode:"+authCode+"idpType:"+idpType+" busNo:"+busNo+" redirecturi:"+redirectUri);var that=this;authUrl=encodeURIComponent(authUrl),!0===this.isOpenCti?sforce.interaction.runApex(this.icCustomSearchApex,"authenticate3","authUrl="+authUrl+"&authMode="+authMode+"&authCode="+authCode+"&idpType="+idpType+"&busNo="+busNo+"&redirectUri="+redirectUri,function(response){try{IC_Validation.isNullOrEmpty(response.error)?(logger.debug("authenticate <<< result:"+response.result),callback(IC_Common.parseJSON(response.result))):response.error==that.sfRunApexError?(logger.trace("refreshToken <<< error: "+response.error+". Reloading..."),window.location.reload()):(logger.error("authenticate <<< error: "+response.error),callback({error:"authenticate response error "+response.error}))}catch(error){logger.fatal("authenticate <<< exception: ",error),callback({error:"authenticate exception"})}}):sforce.apex.execute(this.icCustomSearchApex,"authenticate3",{authUrl:authUrl,authMode:authMode,authCode:authCode,idpType:idpType,busNo:busNo,redirectUri:redirectUri},function(response){try{if(IC_Validation.isNotNullOrEmpty(response)){var responseObj=IC_Common.parseJSON(response);IC_Validation.isNullOrEmpty(responseObj.error)?(logger.debug("authenticate2 response : "+response),callback(responseObj)):responseObj.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(logger.error("authenticate <<< error: "+responseObj.error),callback({error:"authenticate response error "+responseObj.error}))}}catch(error){logger.fatal("authenticate <<< exception : ",error),callback({error:"authenticate exception"})}})},refreshToken:function(tokenUrl,authMode,token,callback){logger.trace("refreshToken >>> url:"+tokenUrl+" authMode:"+authMode+" token:"+token);var that=this;tokenUrl=encodeURIComponent(tokenUrl),token=encodeURIComponent(token),!0===this.isOpenCti?sforce.interaction.runApex(this.icCustomSearchApex,"refreshToken","tokenUrl="+tokenUrl+"&authMode="+authMode+"&token="+token,function(response){try{IC_Validation.isNullOrEmpty(response.error)?(logger.debug("refreshToken <<< result:"+response.result),callback(IC_Common.parseJSON(response.result))):response.error==that.sfRunApexError?(logger.trace("refreshToken <<< error: "+response.error+". Reloading..."),window.location.reload()):(logger.error("refreshToken <<< error: "+response.error),callback({error:"refreshToken response error "+response.error}))}catch(error){logger.fatal("refreshToken <<< exception: ",error),callback({error:"refreshToken exception"})}}):sforce.apex.execute(this.icCustomSearchApex,"refreshToken",{tokenUrl:tokenUrl,authMode:authMode,token:token},function(response){try{if(IC_Validation.isNotNullOrEmpty(response)){var responseObj=IC_Common.parseJSON(response);IC_Validation.isNullOrEmpty(responseObj.error)?(logger.debug("refreshToken response : "+response),callback(responseObj)):responseObj.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(logger.error("refreshToken <<< error: "+responseObj.error),callback({error:"refreshToken response error "+responseObj.error}))}}catch(error){logger.fatal("refreshToken <<< exception : ",error),callback({error:"refreshToken exception"})}})},doScreenPop:function(url,callback){0!==url.indexOf("/")&&(url="/"+url),logger.trace("doScreenPop - url :"+url),sforce.interaction.screenPop(url,!1,function(response){logger.debug("doScreenPop : "+JSON.stringify(response)),"function"==typeof callback&&callback(response)})},doScreenPopNewWindow:function(screenPopUrl){return logger.trace("doScreenPop - url :"+screenPopUrl),window.open(screenPopUrl,"_blank")},isInConsole:function(callback){logger.trace("isInConsole - fired");var that=this;sforce.interaction.isInConsole(function(response){that.isConsole=!1;try{logger.debug("isInConsole - result : "+JSON.stringify(response)),IC_Validation.isNotNullOrEmpty(response.result)&&(that.isConsole=response.result),callback(that.isConsole)}catch(e){logger.fatal("isInConsole : ",e),callback({error:"Error processing isInConsole"})}})},onFocusChange:function(callback){logger.trace("Registering page info event for scc view");var that=this;sforce.interaction.onFocus(function(response){logger.debug("onFocusChange :"+JSON.stringify(response.result)),that.pageInfo=response.result,callback(response.result)})},getCurrentFocusedWindowId:function(){var result,objectId="";return IC_Validation.isNullOrEmpty(this.pageInfo)||(result=IC_Common.parseJSON(this.pageInfo),IC_Validation.isNullOrEmpty(result.object)||(objectId=result.objectId)),objectId},parsePageInfoResult:function(pageResult){var result={};if(IC_Validation.isNotNullOrEmpty(pageResult)){if(result=IC_Common.parseJSON(pageResult),logger.debug("parsePageInfoResult id: "+result.objectId+" name: "+result.objectName+" objectType: "+result.object+", url:"+result.url),IC_Validation.isNullOrEmpty(result.object)&&IC_Validation.isNullOrEmpty(result.objectId)&&IC_Validation.isNullOrEmpty(result.objectName)){logger.debug("parsePageInfoResult parsing object info from url");var url=IC_Common.parseUrl(result.url);result.object=IC_Common.getParameterByName(url.search,"object"),result.objectId=IC_Common.getParameterByName(url.search,"objectId"),result.objectName=IC_Common.getParameterByName(url.search,"objectName")}}else logger.debug("parsePageInfoResult pageResult is null or empty");return result},getPageInfo:function(callback){logger.trace("getPageInfo - fired");var that=this;IC_Validation.isValidObject(this.pageInfo)?callback(this.pageInfo):sforce.interaction.getPageInfo(function(response){logger.debug("getPageInfo - result :"+response.result),that.pageInfo=response.result,callback(response.result)})},createTask:function(callInfo,whoId,whatId,taskId,callback){logger.trace("createTask - whoId :"+whoId+", WhatId :"+whatId+", taskId :"+taskId+", callinfo :",callInfo);var that=this;callInfo=encodeURIComponent(JSON.stringify(callInfo)),sforce.interaction.runApex(this.icCustomSearchApex,"createTask","contactInfo="+callInfo+"&whoId="+whoId+"&whatId="+whatId+"&taskId="+taskId,function(response){var result={taskId:"",isError:!1,errorMsg:""};try{if(IC_Validation.isNullOrEmpty(response.error)){var responseObj=IC_Common.parseJSON(response.result);"false"===responseObj.result?(result.isError=!0,result.errorMsg=responseObj.error,logger.warn("task creation failed : "+responseObj.error)):(result.taskId=responseObj.result,logger.debug("task created successfully : "+responseObj.result))}else response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(result.isError=!0,result.errorMsg=response.error,logger.error("task creation failed : "+response.error));callback(result)}catch(e){result.isError=!0,result.errorMsg="Error processing createTask",logger.fatal("create task : ",e),callback(result)}})},callWrapTask:function(callInfo,whoId,whatId,taskId,callback){callInfo=JSON.stringify(callInfo),logger.trace("callWrapTask - whoId :"+whoId+", WhatId :"+whatId+", taskId :"+taskId+", callinfo :",callInfo);var that=this;callInfo=encodeURIComponent(callInfo);sforce.interaction.runApex(this.icCustomSearchApex,"callWrap","contactInfo="+callInfo+"&lstObject=&whoId="+whoId+"&whatId="+whatId+"&taskId="+taskId,function(response){var result={taskId:"",popTask:!1,isError:!1,errorMsg:""};try{if(IC_Validation.isNullOrEmpty(response.error)){var responseObj=IC_Common.parseJSON(response.result);IC_Validation.isNullOrEmpty(responseObj.taskId)?(result.isError=!0,result.errorMsg=responseObj.error,logger.warn("cleanUpOnContactEnd failed : "+responseObj.error)):(result.taskId=responseObj.taskId,result.popTask=responseObj.popTask,logger.debug("cleanUpOnContactEnd success - Task : "+responseObj.taskId+" , popTask :"+responseObj.popTask+" , error : "+responseObj.error))}else response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(result.isError=!0,result.errorMsg=response.error,logger.error("cleanUpOnContactEnd failed : "+response.error));callback(result)}catch(e){result.isError=!0,result.errorMsg="Error processing callWrap",logger.fatal("cleanUpOnContactEnd failed : ",e),callback(result)}})},callWrapOther:function(callInfo,objectType,lstObject,callback){logger.trace("callWrapOther - objectType :"+objectType);var that=this;callInfo=encodeURIComponent(JSON.stringify(callInfo)),sforce.interaction.runApex(this.icCustomSearchApex,"callWrapOtherObject","contactInfo="+callInfo+"&objectType="+objectType+"&lstObject="+lstObject,function(response){var result={isError:!1,errorMsg:""};try{if(IC_Validation.isNullOrEmpty(response.error)){var responseObj=IC_Common.parseJSON(response.result);IC_Validation.isNullOrEmpty(responseObj.error)?logger.debug("callWrapOther success, result: "+responseObj.result):(result.isError=!0,result.errorMsg=responseObj.error,logger.warn("callWrapOther failed: "+responseObj.error))}else response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(result.isError=!0,result.errorMsg=response.error,logger.error("callWrapOther failed: "+response.error));callback(result)}catch(e){result.isError=!0,result.errorMsg="Error processing callWrapOther",logger.fatal("Failed to process callWrapOther apex response",e),callback(result)}})},downloadLog:function(logData){logData=encodeURIComponent(logData),logger.trace("downloadLog - fired");var that=this;!0===this.isOpenCti?sforce.interaction.runApex(this.icCustomSearchApex,"downloadLog","logData="+logData,function(response){try{if(IC_Validation.isNullOrEmpty(response.error)){var responseObj=IC_Common.parseJSON(response.result);if("false"===responseObj.result)logger.warn("downloadLog failed : "+responseObj.error);else{var frame,logId=responseObj.result.split("-"),url="https://"+window.location.host+"/servlet/servlet.FileDownload?file="+logId[0];logger.debug("downloadLog success url: "+url),(frame=document.getElementById("iFrameDownloadLog")?$("#iFrameDownloadLog"):$('<iframe id="iFrameDownloadLog" height=0 width=0 class="hiddenIframe"/>')).attr("src",url),frame.appendTo("Body"),that.downloadSfLog(logId[1])}}else logger.error("downloadLog failed : "+response.error)}catch(e){logger.fatal("downloadLog failed : ",e)}}):sforce.apex.execute(this.icCustomSearchApex,"downloadLog",{logData:logData},function(response){try{if(IC_Validation.isNotNullOrEmpty(response)){var responseObj=IC_Common.parseJSON(response);if(IC_Validation.isNullOrEmpty(responseObj.error)){logger.debug("downloadLog response : "+response);var frame,logId=responseObj.result.split("-"),url="https://"+window.location.host+"/servlet/servlet.FileDownload?file="+logId[0];logger.debug("downloadLog success url: "+url),(frame=document.getElementById("iFrameDownloadLog")?$("#iFrameDownloadLog"):$('<iframe id="iFrameDownloadLog" height=0 width=0 class="hiddenIframe"/>')).attr("src",url),frame.appendTo("Body"),that.downloadSfLog(logId[1])}else logger.error("downloadLog <<< error: "+responseObj.error)}}catch(error){logger.fatal("downloadLog <<< exception : ",error)}})},downloadSfLog:function(logId){var frame1,url1="https://"+window.location.host+"/servlet/servlet.FileDownload?file="+logId;(frame1=document.getElementById("iFrameDownloadLogSF")?$("#iFrameDownloadLogSF"):$('<iframe id="iFrameDownloadLogSF" height=0 width=0 class="hiddenIframe"/>')).attr("src",url1),frame1.appendTo("Body")},upsertUserOptions:function(stationId,phoneNo,phoneNumberType,logLevel,isTooltipEnabled,agentAudioSettings,agentVisualSettings,callback){logger.trace("upsertUserOptions - stationId :"+stationId+", phoneNo :"+phoneNo+", logLevel :"+logLevel+" ,phoneNumberType: "+phoneNumberType+",agentAudioSettings:"+JSON.stringify(agentAudioSettings)+",agentVisualSettings:"+JSON.stringify(agentVisualSettings));var that=this;stationId=encodeURIComponent(stationId),phoneNo=encodeURIComponent(phoneNo),sforce.interaction.runApex(this.icCustomSearchApex,"upsertUserSettings","stationId="+stationId+"&phoneNo="+phoneNo+"&phoneNumberType="+phoneNumberType+"&logLevel="+logLevel+"&tooltipEnabled="+isTooltipEnabled+"&agentAudioSettings="+JSON.stringify(agentAudioSettings)+"&agentVisualSettings="+JSON.stringify(agentVisualSettings),function(response){var isError=!1,errorMsg="";try{if(IC_Validation.isNullOrEmpty(response.error)){var responseObj=IC_Common.parseJSON(response.result);logger.debug("upsertUserOptions isSuccess : "+responseObj.result),"false"===responseObj.result&&(isError=!0,errorMsg="Error on updating AgentInfo : "+responseObj.error,logger.warn("upsertUserOptions failed : "+responseObj.error))}else response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(isError=!0,errorMsg="Error on updating AgentInfo : "+response.error,logger.error("upsertUserOptions failed : "+response.error));logger.info("upsertUserOptions isfailed : "+isError),callback(isError,errorMsg)}catch(e){logger.fatal("upsertUserOptions failed : ",e),callback(!0,"Error processing updateUserInfo")}})},upsertUserCredentials:function(username,password,isAutoLogin,callback){logger.trace("upsertUserCredentials - username :"+username);var that=this;username=encodeURIComponent(username),password=encodeURIComponent(password),!0===this.isOpenCti?sforce.interaction.runApex(this.icCustomSearchApex,"upsertUserCredentials","userName="+username+"&password="+password+"&isAutoLogin="+isAutoLogin,function(response){var isError=!1,errorMsg="";try{if(IC_Validation.isNullOrEmpty(response.error)){var responseObj=IC_Common.parseJSON(response.result);logger.debug("upsertUserCredentials isSuccess : "+responseObj.result),"false"===responseObj.result&&(isError=!0,errorMsg="Error on updating AgentInfo : "+responseObj.error,logger.warn("upsertUserCredentials failed : "+responseObj.error))}else response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(isError=!0,errorMsg="Error on updating AgentInfo : "+response.error,logger.error("upsertUserCredentials failed : "+response.error));logger.info("upsertUserCredentials isfailed : "+isError),callback(isError,errorMsg)}catch(e){logger.fatal("upsertUserCredentials failed : ",e),callback(!0,"Error processing upsertUserCredentials")}}):sforce.apex.execute(this.icCustomSearchApex,"upsertUserCredentials",{userName:username,password:password,isAutoLogin:isAutoLogin},function(response){var isError=!1,errorMsg="";try{if(IC_Validation.isNotNullOrEmpty(response)){var responseObj=IC_Common.parseJSON(response);IC_Validation.isNullOrEmpty(responseObj.error)?(logger.debug("upsertUserCredentials response : "+response),"false"===responseObj.result&&(isError=!0,errorMsg="Error on updating AgentInfo : "+responseObj.error,logger.warn("upsertUserCredentials failed : "+responseObj.error))):responseObj.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(isError=!0,errorMsg="Error on updating AgentInfo : "+response.error,logger.error("upsertUserCredentials failed : "+response.error))}logger.info("upsertUserCredentials isfailed : "+isError),callback(isError,errorMsg)}catch(error){logger.fatal("upsertUserCredentials failed : ",error),callback(!0,"Error processing upsertUserCredentials")}})},enableClickToDial:function(eventListener){sforce.interaction.cti.enableClickToDial(),!1===this.onClickToDial&&(this.onClickToDial=!0,logger.trace("enabling click to dial"),sforce.interaction.cti.onClickToDial(eventListener))},disableClickToDial:function(){logger.trace("disable click to dial"),sforce.interaction.cti.disableClickToDial(),this.onClickToDial=!1},contactSearch:function(contact,callback){var inboundObject,popSetting,outboundObject,searchObject,error="",that=this,isOutbound=!1;logger.trace("ContactID: "+contact.id," contactSearch"),this.getSoftphoneLayout(function(setting){IC_Validation.isNullOrEmpty(setting.error)?(inboundObject=JSON.stringify(setting.inboundObject),outboundObject=JSON.stringify(setting.outboundObject),popSetting=JSON.stringify(setting.screenPopSettings)):(error="Error in getting softphone layout setting.",inboundObject="{}",outboundObject="{}",popSetting="{}"),"CallContactEvent"===contact.contactType||"VoiceMailContactEvent"===contact.contactType?(isOutbound=that.isRegularOutbound(contact),searchObject=!0===isOutbound?outboundObject:inboundObject,that.searchAndPopCall(contact,searchObject,popSetting,error,isOutbound,callback)):"WorkItemContactEvent"===contact.contactType?that.searchAndPopWorkItem(contact,inboundObject,popSetting,error,callback):"ChatContactEvent"===contact.contactType?that.searchAndPopChat(contact,inboundObject,popSetting,error,callback):"EmailContactEvent"===contact.contactType&&that.searchAndPopEmail(contact,inboundObject,popSetting,error,callback)})},isRegularOutbound:function(contact){return!1===contact.inbound&&"Regular"===contact.type},getSoftphoneLayout:function(callback){var that=this;IC_Validation.isValidObject(this.softPhoneLayoutSettings)?(logger.trace("getSoftphoneLayout : settings exist"),callback(this.softPhoneLayoutSettings)):(logger.trace("getSoftphoneLayout : fired"),sforce.interaction.cti.getSoftphoneLayout(function(response){var phoneSetting={};try{if(IC_Validation.isNullOrEmpty(response.error)){var responseObj=IC_Common.parseJSON(response.result);phoneSetting.inboundObject=responseObj.Inbound.objects,phoneSetting.outboundObject=responseObj.Outbound.objects,phoneSetting.screenPopSettings=responseObj.Inbound.screenPopSettings,that.softPhoneLayoutSettings=phoneSetting,logger.debug("getSoftphoneLayout success"+JSON.stringify(phoneSetting))}else phoneSetting.error=response.error,logger.error("getSoftphoneLayout failed"+response.error)}catch(e){logger.fatal("getSoftphoneLayout failed",e),phoneSetting.error="Error processing getSoftphoneLayout"}finally{callback(phoneSetting)}}))},searchAndPopWorkItem:function(contact,inboundObject,popSetting,error,callback){var that=this,cScreenPopUrl=IC_Common.appendQueryString(contact.screenPopUrl,{_c:contact.id});logger.trace("ContactID: "+contact.id," searchAndPopWorkItem - type :"+contact.workItemType+", workItemId :"+contact.workItemId+", workItempayload :"+contact.workItemPayload+", screenpopUrl :"+cScreenPopUrl),sforce.interaction.runApex(this.icCustomSearchApex,"workItemCustomSearch","contactId="+contact.id+"&type="+contact.workItemType+"&id="+contact.workItemId+"&workItempayload="+encodeURIComponent(contact.workItemPayload)+"&screenpopUrl="+encodeURIComponent(cScreenPopUrl)+"&inboundObject="+encodeURIComponent(inboundObject)+"&popSetting="+popSetting,function(response){var popResult=that.checkScreenPopUrl(cScreenPopUrl),contactData=null,searchResult={},screenPopUrl="";try{IC_Validation.isNullOrEmpty(response.error)?(contactData=IC_Common.parseJSON(response.result),popResult.isSalesforceUrl?screenPopUrl=popResult.url:contactData.hasControlledSearch?(searchResult=IC_Common.parseJSON(contactData.searchResult),screenPopUrl=contactData.screenPopUrl):IC_Validation.isNullOrEmpty(contactData.error)||(error+="Error in getting configuration.",logger.warn("searchAndPopWorkItem failed :"+contactData.error))):response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(error+=response.error,logger.error("searchAndPopWorkItem failed :"+response.error))}catch(e){error+="Error processing searchAndPopWorkItem",logger.fatal("searchAndPopWorkItem failed :",e)}finally{var sfResult=that.onContactResult(contact.id,contactData,popResult,inboundObject,error,searchResult,screenPopUrl);logger.trace("searchAndPopWorkItem :"+screenPopUrl+" SfResult"+JSON.stringify(sfResult)),callback(sfResult)}})},searchAndPopChat:function(contact,inboundObject,popSetting,error,callback){var that=this,cScreenPopUrl=IC_Common.appendQueryString(contact.screenPopUrl,{_c:contact.id});logger.trace("ContactID: "+contact.id," searchAndPopChat - screenpopUrl :"+cScreenPopUrl),sforce.interaction.runApex(this.icCustomSearchApex,"chatCustomSearch","contactId="+contact.id+"&screenpopUrl="+encodeURIComponent(cScreenPopUrl)+"&inboundObject="+encodeURIComponent(inboundObject)+"&popSetting="+popSetting,function(response){var popResult=that.checkScreenPopUrl(cScreenPopUrl),contactData=null,searchResult={},screenPopUrl="";try{IC_Validation.isNullOrEmpty(response.error)?(contactData=IC_Common.parseJSON(response.result),popResult.isSalesforceUrl?screenPopUrl=popResult.url:contactData.hasControlledSearch?(searchResult=IC_Common.parseJSON(contactData.searchResult),screenPopUrl=contactData.screenPopUrl):IC_Validation.isNullOrEmpty(contactData.error)||(error+="Error in getting configuration.",logger.warn("searchAndPopChat failed :"+contactData.error))):response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(error+=response.error,logger.error("searchAndPopChat failed :"+response.error))}catch(e){error+="Error processing searchAndPopChat",logger.fatal("searchAndPopChat failed :",e)}finally{var sfResult=that.onContactResult(contact.id,contactData,popResult,inboundObject,error,searchResult,screenPopUrl);logger.trace("searchAndPopChat :"+screenPopUrl+" SfResult"+JSON.stringify(sfResult)),callback(sfResult)}})},searchAndPopCall:function(contact,inboundObject,popSetting,error,isOutbound,callback){var phoneNo,cScreenPopUrl,contactId=contact.id,that=this,ani=contact.ani,dnis=contact.dnis;"VoiceMailContactEvent"===contact.contactType&&(ani=contact.from,dnis=contact.to),phoneNo=contact.inbound?ani:dnis,logger.trace("ContactID: "+contact.id," searchAndPopCall - Phone :"+phoneNo+", scriptVar :"+contact.screenPopUrl),cScreenPopUrl=this.addAniDnis(contact.screenPopUrl,ani,dnis,contact.id),sforce.interaction.runApex(this.icCustomSearchApex,"callCustomSearch2","contactId="+contact.id+"&contactType="+contact.type+"&externalId="+contact.externalId+"&phoneNumber="+encodeURIComponent(phoneNo)+"&screenpopUrl="+encodeURIComponent(cScreenPopUrl)+"&inboundObject="+encodeURIComponent(inboundObject)+"&popSetting="+popSetting,function(response){var sfResult,popResult=that.checkScreenPopUrl(cScreenPopUrl),contactData=null,searchResult={};try{IC_Validation.isNullOrEmpty(response.error)?(contactData=IC_Common.parseJSON(response.result),logger.debug("searchAndPopCall - response:",response),popResult.isSalesforceUrl?(sfResult=that.onContactResult(contactId,contactData,popResult,inboundObject,error,searchResult,popResult.url),logger.trace("searchAndPopCall :"+popResult.url+" SfResult"+JSON.stringify(sfResult)),callback(sfResult)):contactData.hasControlledSearch?(searchResult=IC_Common.parseJSON(contactData.searchResult),sfResult=that.onContactResult(contactId,contactData,popResult,inboundObject,error,searchResult,contactData.screenPopUrl),logger.trace("searchAndPopCall :"+contactData.screenPopUrl+" SfResult"+JSON.stringify(sfResult)),callback(sfResult)):(IC_Validation.isNullOrEmpty(contactData.error)||(error+="Error in getting configuration, performing default search.",logger.warn("searchAndPopCall failed :"+contactData.error)),that.defaultSearch(phoneNo,contact.contactType,popResult,contactId,contactData,inboundObject,popSetting,error,isOutbound,callback))):response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(error+="Error in executing apex method, performing default search.",logger.error("searchAndPopCall failed :"+response.error),that.defaultSearch(phoneNo,contact.contactType,popResult,contactId,contactData,inboundObject,popSetting,error,isOutbound,callback))}catch(e){error+="Error in processing Salesforce response, performing default search.",logger.fatal("searchAndPopCall failed :",e),that.defaultSearch(phoneNo,contact.contactType,popResult,contactId,contactData,inboundObject,popSetting,error,isOutbound,callback)}})},searchAndPopEmail:function(contact,inboundObject,popSetting,error,callback){var fromEmailAddress=contact.fromAddress,contactId=contact.id,that=this,contactInfo="",cScreenPopUrl=IC_Common.appendQueryString(contact.screenPopUrl,{_c:contact.id}),needToPerformDefaultSearch=!1;logger.trace("ContactID: "+contact.id," searchAndPopEmail - Email :"+fromEmailAddress+", scriptVar :"+contact.screenPopUrl),contactInfo=this.addContactDetails(contact),contactInfo=JSON.stringify(contactInfo),contactInfo=encodeURIComponent(contactInfo),sforce.interaction.runApex(this.icCustomSearchApex,"contactSearch","contactInfo="+contactInfo+"&screenpopUrl="+encodeURIComponent(cScreenPopUrl)+"&inboundObject="+encodeURIComponent(inboundObject)+"&popSetting="+popSetting,function(response){var sfResult,popResult=that.checkScreenPopUrl(cScreenPopUrl),contactData=null,searchResult={};logger.debug("searchAndPopEmail - response : ",JSON.stringify(response));try{IC_Validation.isNullOrEmpty(response.error)?(contactData=IC_Common.parseJSON(response.result),logger.debug("searchAndPopEmail - response:",response),popResult.isSalesforceUrl?(sfResult=that.onContactResult(contactId,contactData,popResult,inboundObject,error,searchResult,popResult.url),logger.trace("searchAndPopEmail :"+popResult.url+" SfResult"+JSON.stringify(sfResult))):contactData.hasControlledSearch?(searchResult=IC_Common.parseJSON(contactData.searchResult),sfResult=that.onContactResult(contactId,contactData,popResult,inboundObject,error,searchResult,contactData.screenPopUrl),logger.trace("searchAndPopEmail :"+contactData.screenPopUrl+" SfResult"+JSON.stringify(sfResult))):(IC_Validation.isNullOrEmpty(contactData.error)||(error+="Error in getting configuration, performing default search.",logger.warn("searchAndPopEmail failed :"+contactData.error)),needToPerformDefaultSearch=!0)):response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(error+="Error in executing apex method, performing default search.",logger.error("searchAndPopEmail failed :"+response.error),needToPerformDefaultSearch=!0)}catch(e){error+="Error in processing Salesforce response, performing default search.",logger.fatal("searchAndPopEmail failed :",e),needToPerformDefaultSearch=!0}finally{contact.isInbound?needToPerformDefaultSearch?that.defaultSearch(fromEmailAddress,contact.contactType,popResult,contactId,contactData,inboundObject,popSetting,error,!1,callback):callback(sfResult):(sfResult=that.onContactResult(contactId,contactData,popResult,inboundObject,error,searchResult,contactData.screenPopUrl),callback(sfResult))}})},addContactDetails:function(contact){var _contact=new Object;return _contact.id=contact.id,_contact.contactType=contact.contactType,_contact.fromAddress=contact.fromAddress?contact.fromAddress:"",_contact},defaultSearch:function(searchValue,contactType,popResult,contactId,contactData,inboundObjects,popSetting,error,isOutbound,callback){var searchResult={},queryString=popResult.queryString,screenPopUrl="",that=this,calltype=!0===isOutbound?"Outbound":"Inbound",jsonInboundObject=IC_Common.parseJSON(inboundObjects);if(logger.trace("defaultSearch - searchValue:"+searchValue),0===Object.keys(jsonInboundObject).length){var sfResult=that.onContactResult(contactId,contactData,popResult,inboundObjects,error,{},screenPopUrl,!0);return callback(sfResult),!0}sforce.interaction.searchAndGetScreenPopUrl(searchValue,queryString,calltype,function(response){try{if(logger.debug("defaultSearch - result: ",JSON.stringify(response)),IC_Validation.isNullOrEmpty(response.error)){if((searchResult=IC_Common.parseJSON(response.result)).hasOwnProperty("screenPopUrl")){screenPopUrl=searchResult.screenPopUrl,delete searchResult.screenPopUrl;var queryResultCount=Object.keys(searchResult).length;screenPopUrl=that.formScreenPopUrl(screenPopUrl,contactType,queryResultCount,queryString,searchValue,popSetting,contactId)}}else error+=response.error,logger.error("defaultSearch failed :"+response.error)}catch(e){error+="Error in processing defaultSearch",logger.fatal("defaultSearch failed :",e)}finally{var sfResult=that.onContactResult(contactId,contactData,popResult,inboundObjects,error,searchResult,screenPopUrl);logger.trace("defaultSearch - SfResult"+JSON.stringify(sfResult)),callback(sfResult)}})},addAniDnis:function(screenPopUrl,ani,dnis,contactId){if(logger.trace("addAniDnis - screenPopUrl :"+screenPopUrl+", ani :"+ani+", dnis :"+dnis),IC_Validation.isNullOrEmpty(screenPopUrl))screenPopUrl=IC_Common.appendQueryString(screenPopUrl,{ani:ani,dnis:dnis,_c:contactId});else{var lowQuery=screenPopUrl.toLowerCase();-1===lowQuery.indexOf("ani=")&&(screenPopUrl=IC_Common.appendQueryString(screenPopUrl,{ani:ani})),-1===lowQuery.indexOf("dnis=")&&(screenPopUrl=IC_Common.appendQueryString(screenPopUrl,{dnis:dnis})),screenPopUrl=IC_Common.appendQueryString(screenPopUrl,{_c:contactId})}return logger.trace("addAniDnis - result screenPopUrl :"+screenPopUrl),screenPopUrl},formScreenPopUrl:function(screenPopUrl,contactType,count,query,phoneNumber,popSetting,contactId){if(!IC_Validation.isNullOrEmpty(screenPopUrl)){logger.trace("formScreenPopUrl - result screenPopUrl :"+screenPopUrl+", count :"+count+", query :"+query+", Phone :",phoneNumber);var queryPartExist=-1!==screenPopUrl.indexOf("?");if(IC_Validation.isNullOrEmpty(query)||0!==screenPopUrl.indexOf("/apex"))if(0===count){if(screenPopUrl+=queryPartExist?"&":"?",IC_Validation.isNullOrEmpty(popSetting))screenPopUrl+="con10="+phoneNumber+"&Phone="+phoneNumber+"&lea8="+phoneNumber+"&acc10="+phoneNumber;else if(popSetting=IC_Common.parseJSON(popSetting),IC_Validation.isValidObject(popSetting)&&popSetting.hasOwnProperty("NoMatch")){var scPopData=popSetting.NoMatch;if(IC_Validation.isValidObject(scPopData)&&scPopData.hasOwnProperty("screenPopData")&&scPopData.hasOwnProperty("screenPopType"))if("PopToEntity"===scPopData.screenPopType){var objType=scPopData.screenPopData;"EmailContactEvent"===contactType?"Contact"==objType?screenPopUrl+="con15="+phoneNumber:"Account"==objType?screenPopUrl+="acc="+phoneNumber:"User"==objType?screenPopUrl+="Email="+phoneNumber:"Lead"==objType&&(screenPopUrl+="lea11="+phoneNumber):"Contact"==objType?screenPopUrl+="con10="+phoneNumber:"Account"==objType?screenPopUrl+="acc10="+phoneNumber:"User"==objType?screenPopUrl+="Phone="+phoneNumber:"Lead"==objType&&(screenPopUrl+="lea8="+phoneNumber)}}screenPopUrl=IC_Common.appendQueryString(screenPopUrl,{_c:contactId})}else screenPopUrl=IC_Common.appendQueryString(screenPopUrl,{_c:contactId});else screenPopUrl+=queryPartExist?"&":"?",screenPopUrl+=query}return logger.debug("formScreenPopUrl - result screenPopUrl :"+screenPopUrl),screenPopUrl},checkScreenPopUrl:function(screenPopUrl){var url=document.createElement("a"),result={isSalesforceUrl:!1,url:"",queryString:""};return IC_Validation.isNullOrEmpty(screenPopUrl)||(url.href=screenPopUrl,result.queryString=url.search.slice(1),!/^http:\/\/|^https:\/\//i.test(screenPopUrl)||/\/incontact\/Agent\/ScreenPopPrintVars.aspx?/i.test(screenPopUrl)||/sfdc[0-9]|crm[0-9]|sfdcquery[0-9]|crmquery[0-9]/i.test(screenPopUrl)||(url.href=screenPopUrl,/\.force\.com$/i.test(url.hostname)||/\.salesforce\.com/i.test(url.hostname)?(result.url=this.getRelativeUrl(url),result.isSalesforceUrl=!0,logger.debug("inContact controlled url pop isSalesforceDomain:"+result.isSalesforceUrl+" , popUrl :"+result.url)):(result.url=screenPopUrl,logger.debug("inContact controlled url pop isSalesforceDomain: false, popUrl :"+screenPopUrl)))),result},getRelativeUrl:function(sfUrl){try{logger.debug("getRelativeUrl - sfUrl :"+sfUrl);var hostname,pathname=sfUrl.pathname;/\.force\.com$/i.test(sfUrl.hostname)&&(hostname="apex/"+(hostname=sfUrl.hostname.slice(0,sfUrl.hostname.indexOf(".")))+"__",pathname=pathname.replace(/\/apex\//i,hostname));var url=pathname+sfUrl.search;return logger.debug("getRelativeUrl - result Url :"+url),url}catch(e){return logger.error("getRelativeUrl failed:",e),""}},addContactId:function(contactId,screenPopUrl){return IC_Validation.isNullOrEmpty(screenPopUrl)||-1!==screenPopUrl.indexOf("&_c="+contactId)||(screenPopUrl=IC_Common.appendQueryString(screenPopUrl,{_c:contactId})),screenPopUrl},onContactResult:function(contactId,configData,popResult,inboundObjects,error,searchResult,sfScreenPopUrl,isNoObjectFound){inboundObjects=IC_Common.parseJSON(inboundObjects),sfScreenPopUrl=this.addContactId(contactId,sfScreenPopUrl);var isNoObject=!0===isNoObjectFound?"NoObject":"",sfResult={cId:contactId,urlPop:popResult.isSalesforceUrl,screenPopUrl:popResult.url,sfScreenPopUrl:sfScreenPopUrl,isScreenPopped:!1,canPopTask:!1,outboundData:isNoObject,error:error,results:{inboundObjects:inboundObjects,result:searchResult},task:{id:"",notes:"",disp:{value:"",order:0,id:"",isAmount:!1,isDate:!1},secDisp:{value:"",order:0,id:""},dispPayload:{isReschedule:!1,data:""},who:"",what:""},whoLst:[],whatLst:[],acw:!1,final:!1};return IC_Validation.isValidObject(configData)?(sfResult.create=configData.createTask,sfResult.createForRefused=configData.createTaskForRefused,sfResult.pop=configData.popTask,sfResult.related=IC_Common.parseJSON(configData.taskRealtedObjects),sfResult.hasControlledSearch=configData.hasControlledSearch,sfResult.configurableSearch=configData.configurableSearch,sfResult.entityMappingType=configData.entityMappingType):(sfResult.create=!0,sfResult.createForRefused=!0,sfResult.pop=!1,sfResult.entityMappingType=0,sfResult.related={Account:!0,Asset:!0,Campaign:!0,Case:!0,Contract:!0,Opportunity:!0,Product2:!0,Solution:!0},sfResult.hasControlledSearch=!1,sfResult.configurableSearch=!1),sfResult},getIANATimeZoneOffset:function(ianaName,callback){logger.trace("getIANATimeZoneOffset - ianaName :"+ianaName);var that=this;sforce.apex.execute(this.icCustomSearchApex,"getIANATimeZoneOffset",{ianaName:ianaName},function(response){try{if(!IC_Validation.isNullOrEmpty(response)){var responseObj=IC_Common.parseJSON(response);IC_Validation.isNullOrEmpty(response.error)?(logger.debug("getIANATimeZoneOffset isSuccess : "+response),callback(responseObj.result,responseObj.error)):responseObj.error==that.sfRunApexError&&(logger.trace("SF session is invalid. Reloading the app."),window.location.reload())}}catch(e){logger.fatal("getIANATimeZoneOffset failed : ",e),callback(0,"Error processing getIANATimeZoneOffset")}})},getOmniChannelMappingDetails:function(callback){logger.trace("getOmniChannelMapping >>>");var that=this;sforce.interaction.runApex(this.icCustomSearchApex,"getOmniChannelMappingDetails","data=''",function(response){try{if(logger.debug("getOmniChannelMapping <<<"+JSON.stringify(response)),response.result){var i,responseObj=IC_Common.parseJSON(response.result),resultObj=IC_Common.parseJSON(responseObj.result),omniChannelSettings={master:"",presenceMappings:[]};if(resultObj&&resultObj.presenceMappings){for(i=0;i<resultObj.presenceMappings.length;i++)omniChannelSettings.presenceMappings.push(IC_Common.parseJSON(resultObj.presenceMappings[i]));omniChannelSettings.master=(resultObj.PresenceMaster||"").toLowerCase()}callback(omniChannelSettings)}else response.error==that.sfRunApexError&&(logger.trace("SF session is invalid. Reloading the app."),window.location.reload())}catch(e){logger.fatal("Exception in getOmniChannelMapping. ",e),callback(null)}})},setServicePresenceStatus:function(statusId,callback){logger.trace("setServicePresenceStatus  - statusId :"+statusId),sforce.console.presence.setServicePresenceStatus(statusId,function(response){try{logger.trace("setServicePresenceStatus  - result :"+JSON.stringify(response)),callback(response)}catch(e){logger.fatal("setServicePresenceStatus failed : ",e),callback(null)}})},getServicePresenceStatusId:function(callback){logger.trace("getServicePresenceStatusId"),sforce.console.presence.getServicePresenceStatusId(function(response){try{logger.trace("getServicePresenceStatusId  - result :"+JSON.stringify(response)),callback(response.statusId)}catch(e){logger.fatal("getServicePresenceStatusId failed : ",e),callback(null)}})},getAvailableorBusy:function(statusId,callback){logger.trace("getAvailableorBusy  - statusId :"+statusId);try{var query="select IsAway from UserServicePresence where  ServicePresenceStatusId ='"+statusId+"' order by CreatedDate desc limit 1",queryResult=sforce.connection.query(query);logger.debug("getAvailableorBusy Success : "+JSON.stringify(queryResult)),callback("true"!=queryResult.records.IsAway)}catch(error){logger.fatal("getAvailableorBusy Failed : ",error.faultstring)}},getFirstandLastName:function(id,objectType,callback){logger.trace("getFirstandLastName  - id :"+id+" ,objectType: "+objectType);try{var query="select id,firstName,lastname from "+objectType+" where id='"+id+"'",queryResult=sforce.connection.query(query);logger.debug("getFirstandLastName Success : "+JSON.stringify(queryResult)),callback(queryResult.records)}catch(error){callback(null),logger.fatal("getFirstandLastName Failed : ",error.faultstring)}},openCXone:function(vfPageUrl){if(this.isConsole){var cx1Icon=this.staticResource+"/css/images/cxone-favicon.svg";sforce.console.openPrimaryTab(null,vfPageUrl,!0,"CXone",function(tabResp){logger.debug("openCXone:openPrimaryTab <<< success:"+tabResp.success+" tabId:"+tabResp.id),tabResp.success&&sforce.console.setTabIcon(cx1Icon,tabResp.id,function(iconResp){logger.debug("openCXone:setTabIcon <<< success:"+iconResp.success)})},"CXoneTab")}else{var popupOptions="width=765,height=665,scrollbars=yes,toolbar=no,left="+(screen.width/2-382.5);this.cx1Window=window.open(vfPageUrl,"CXoneWindow",popupOptions),this.cx1Window.focus()}},closeCXone:function(){if("true"!==localStorage.isCX1Open)return localStorage.cx1Tab=null,void logger.debug("closeCXone: ignore cx1Window null");this.isConsole?sforce.console.closeTab(localStorage.cx1Tab,function(tabResp){localStorage.cx1Tab=null,tabResp.error&&logger.error("closeTab <<< failed: "+tabResp.error)}):(null==this.cx1Window&&(this.cx1Window=window.open("","CXoneWindow")),this.cx1Window.close())},createAgentWork:function(workItemId,serviceChannelId,callback){var that=this;logger.trace("createAgentWork >>> workItemId: "+workItemId+" serviceChannelId: "+serviceChannelId),sforce.interaction.runApex(this.icCustomSearchApex,"createAgentWork","workItemId="+workItemId+"&serviceChannelId="+serviceChannelId,function(response){try{logger.debug("createAgentWork <<< result: "+JSON.stringify(response)),IC_Validation.isNullOrEmpty(response.error)?callback(!0):response.error==that.sfRunApexError?(logger.trace("SF session is invalid. Reloading the app."),window.location.reload()):(logger.error("createAgentWork <<< error: "+JSON.stringify(response.error)),callback(!1))}catch(e){logger.fatal("createAgentWork <<< exception: ",error),callback(!1)}})},canOmniChannelAcceptAgentWork:function(serviceChannelId,callback){logger.trace("canOmniChannelAcceptAgentWork >>> serviceChannelId : "+serviceChannelId);var canAccept=!1;this.getServicePresenceStatusId(function(servicePresenceStatusId){try{if(servicePresenceStatusId){var query="select id,ServiceChannelId, ServicePresenceStatusId from ServiceChannelStatus where ServicePresenceStatusId ='"+servicePresenceStatusId+"' and ServiceChannelId='"+serviceChannelId+"' limit 1",queryResult=sforce.connection.query(query);logger.debug("canOmniChannelAcceptAgentWork Success : "+JSON.stringify(queryResult)),canAccept=1==queryResult.size}}catch(error){canAccept=!1,logger.fatal("canOmniChannelAcceptAgentWork Failed : ",error.faultstring)}finally{callback(canAccept)}})}}}(jQuery);